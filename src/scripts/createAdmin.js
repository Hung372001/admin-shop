// scripts/createAdmin.js
import { initializeApp } from 'firebase/app';
import { getAuth, createUserWithEmailAndPassword } from 'firebase/auth';
import { getFirestore, doc, setDoc, serverTimestamp } from 'firebase/firestore';

// Load environment variables
import dotenv from 'dotenv';
dotenv.config({ path: '../../.env' });

const firebaseConfig = {
    apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
    authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
    projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
    storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
    messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
    appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

// Validate config
if (!firebaseConfig.apiKey || !firebaseConfig.projectId) {
    console.error('‚ùå Firebase config kh√¥ng h·ª£p l·ªá! Ki·ªÉm tra .env.local');
    console.log('üîç C√°c bi·∫øn m√¥i tr∆∞·ªùng hi·ªán t·∫°i:');
    console.log({
        API_KEY: !!process.env.NEXT_PUBLIC_FIREBASE_API_KEY ? 'OK' : 'MISSING',
        PROJECT_ID: !!process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID ? 'OK' : 'MISSING',
    });
    process.exit(1);
}

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// T·∫°o super admin
async function createSuperAdmin() {
    const email = 'admin@shop.com';
    const password = 'Admin@123456';
    const displayName = 'Super Admin';

    console.log('üöÄ B·∫Øt ƒë·∫ßu t·∫°o Super Admin...');
    console.log('üìß Email:', email);

    try {
        // 1. T·∫°o user trong Firebase Auth
        console.log('üìù ƒêang t·∫°o user trong Firebase Auth...');
        const userCredential = await createUserWithEmailAndPassword(auth, email, password);
        const user = userCredential.user;

        console.log('‚úÖ User ƒë√£ ƒë∆∞·ª£c t·∫°o:', user.uid);
        console.log('üìß Email verified:', user.emailVerified);

        // 2. T·∫°o document user trong Firestore
        console.log('üìä ƒêang t·∫°o document user trong Firestore...');
        await setDoc(doc(db, 'users', user.uid), {
            email,
            displayName,
            role: 'super-admin',
            permissions: ['all', 'products', 'orders', 'users', 'categories'],
            isActive: true,
            emailVerified: true,
            createdAt: serverTimestamp(),
            lastLogin: null,
            ordersCount: 0,
            // Th√™m metadata
            createdBy: 'system',
            createdVia: 'admin_script',
        });

        // 3. Log activity (optional)
        console.log('üìã ƒêang t·∫°o log activity...');
        await setDoc(doc(db, 'admin-logs', `admin_${user.uid}_creation`), {
            adminId: user.uid,
            adminEmail: email,
            adminName: displayName,
            action: 'create',
            resource: 'user',
            resourceId: user.uid,
            details: {
                event: 'super_admin_created',
                method: 'script',
                timestamp: new Date().toISOString(),
            },
            ipAddress: '127.0.0.1',
            userAgent: 'Node.js Admin Script',
            createdAt: serverTimestamp(),
        });

        console.log('\nüéâ SUPER ADMIN ƒê√É ƒê∆Ø·ª¢C T·∫†O TH√ÄNH C√îNG!');
        console.log('='.repeat(50));
        console.log('üìß EMAIL:', email);
        console.log('üîë PASSWORD:', password);
        console.log('üÜî USER ID:', user.uid);
        console.log('üë§ DISPLAY NAME:', displayName);
        console.log('üîê ROLE:', 'super-admin');
        console.log('='.repeat(50));
        console.log('\nüí° H∆Ø·ªöNG D·∫™N ƒêƒÇNG NH·∫¨P:');
        console.log('1. Ch·∫°y CMS: cd .. && npm run dev');
        console.log('2. Truy c·∫≠p: http://localhost:3000/login');
        console.log('3. ƒêƒÉng nh·∫≠p v·ªõi email/password ·ªü tr√™n');
        console.log('\n‚ö†Ô∏è  L∆ØU √ù:');
        console.log('- ƒê·ªïi password ngay sau khi ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu');
        console.log('- Backup file .env.local an to√†n');
        console.log('- Kh√¥ng commit .env.local l√™n Git');

    } catch (error) {
        if (error.code === 'auth/email-already-exists') {
            console.log('‚ö†Ô∏è  Email "admin@shop.com" ƒë√£ t·ªìn t·∫°i!');
            console.log('üí° G·ª£i √Ω:');
            console.log('   - Ki·ªÉm tra Firebase Console > Authentication > Users');
            console.log('   - Ho·∫∑c x√≥a user c≈© v√† ch·∫°y l·∫°i script');
            console.log('   - Ho·∫∑c d√πng email kh√°c: node createAdmin.js --email=newadmin@shop.com');
        } else if (error.code === 'auth/weak-password') {
            console.log('‚ùå M·∫≠t kh·∫©u qu√° y·∫øu! C·∫ßn √≠t nh·∫•t 6 k√Ω t·ª±.');
            console.log('üí° Thay ƒë·ªïi password trong code ho·∫∑c d√πng m·∫≠t kh·∫©u m·∫°nh h∆°n.');
        } else {
            console.error('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh:', error);
            console.error('üí° Code:', error.code);
            console.error('üí° Message:', error.message);
        }
        process.exit(1);
    }
}

// Handle command line arguments
const args = process.argv.slice(2);
const customEmail = args.find(arg => arg.startsWith('--email='));
if (customEmail) {
    const email = customEmail.split('=')[1];
    if (email && email.includes('@')) {
        console.log(`üìß S·ª≠ d·ª•ng custom email: ${email}`);
        // Modify function to use custom email
        // ... (implementation)
    }
}

// Ch·∫°y script
createSuperAdmin()
    .then(() => {
        console.log('\n‚úÖ Script ho√†n th√†nh th√†nh c√¥ng!');
        process.exit(0);
    })
    .catch((error) => {
        console.error('\n‚ùå Script th·∫•t b·∫°i:', error);
        process.exit(1);
    });